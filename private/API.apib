FORMAT: 1A
HOST: http://localhost:3000/api/v2

# Big Boat API

## Concepts

BigBoat and the BigBoat API use the concepts of Apps and Instances. An App is a
blueprint for an Instance. An app is comprised of a Docker Compose file and
a bit of meta information stored in the BigBoat Compose file. The full work-flow
to create a new App and to create a new Instance from it is:

1. Create an App
2. Update the Docker Compose file
3. Update the BigBoat Compose file (optional, default file is created)
4. Create an Instance

## Authentication

All resource endpoints require authentication. An API key is user bound and can
be obtained from the dashboard configuration page. The api key must be included
in every request as either a header (***api-key***) or URL query parameter (***?api-key=...***).

## Consume the API

When consuming the API please note that

- The HTTP PUT operation is used to create and update objects directly
- An API key should be present on every request
- Compose files must be uploaded with `Content-Type:text/plain`
- Line endings in Compose files should be preserved (use `--data-binary` with curl)

### Curl Example

```bash
curl -H "api-key:my-apy-key" -H "Content-Type:text/plain" \
  -X PUT http://bigboat/api/v2/apps/nginx/latest/files/dockerCompose \
  --data-binary @docker-compose.yaml
```

------

# Group Apps

An App is a logical named and versioned entity. It serves as a template for
an **Instance**. This ***API*** offers multiple resources to retrieve and modify
different aspects of an App.

## Applications [/apps]

+ Model (application/json)

    ```js
    [
      {
          "id": "ERfrBncoPKSN9ampt",
          "name": "nginx",
          "version": "latest"
      },
      {
          "id": "LENn6QcjnG8WRvAxf",
          "name": "nginx",
          "version": "1.11.4"
      }

    ]
    ```

### Retrieve all Applications [GET]
Returns all applications.

+ Response 200

  [Applications][]

## App [/apps/{name}/{version}]
An application is a logical unit of application configuration data.

+ Parameters
  + name: `nginx` (string) - The name of the application
  + version: `latest` (string) - The version of the application

+ Model (application/json)

  ```js
  {
    "id": "MKMZCnLcEJmkjSenJ",
    "name": "nginx",
    "version": "latest"
  }
  ```

### Retrieve an App [GET]
Returns a specific application.

+ Response 200

    [App][]

+ Response 404

### Create an App [PUT]
Creates a new application with the specified name and version. Returns the
App when succesfully created or updated.

+ Response 201

    [App][]

### Delete an App [DELETE]
Delete an application.

+ Response 204
+ Response 404

## Docker Compose [/apps/{name}/{version}/files/dockerCompose]
A Docker compose file associated with an application.

+ Parameters
  + name: `nginx` (string) - The name of the application
  + version: `latest` (string) - The version of the application

+ Model (text/plain)

        www:
          image: nginx:latest

### Retrieve the Docker compose file [GET]

+ Response 200
  [Docker Compose][]

### Update the Docker compose file [PUT]

+ Request
  [Docker Compose][]
+ Response 201
+ Response 400 (application/json)

  ```js
  {
    "message": "JS-YAML: end of the stream or a document separator is expected at line 2, column 1:....."
  }
  ```


## BigBoat Compose [/apps/{name}/{version}/files/bigboatCompose]
A BigBoat compose file associated with an application.

+ Parameters
  + name: `nginx` (string) - The name of the application
  + version: `latest` (string) - The version of the application

+ Model (text/plain)

        name: nginx
        version: latest

        www:
          enable_ssh: true

### Retrieve the BigBoat compose file [GET]

+ Response 200
  [BigBoat Compose][]

### Update the BigBoat compose file [PUT]

The BigBoat compose file should be a valid YAML file.
The `name` and `version` properties of the BigBoat Compose file should equal to
the name and version values of the App entity. The request is denied otherwise.

+ Request
  [BigBoat Compose][]
+ Response 201
+ Response 400 (application/json)

  ```js
  {
    "message": "JS-YAML: end of the stream or a document separator is expected at line 2, column 1:....."
  }
  ```

# Group Instance

An Instance is a parameterized App that is deployed for execution.

## Instances [/instances]

+ Model (application/json)

  ```js
  [
    {
        "id": "y7bzwghzP9ouM56g6",
        "name": "nginx",
        "state": {
            "current": "running",
            "desired": "running"
        }
    },
    {
        "id": "ySYXNTPw2ry9XE6nu",
        "name": "nginx2",
        "state": {
            "current": "starting",
            "desired": "running"
        }
    }
  ]
  ```

### Retrieve all Instances [GET]
Returns all instances along with their current and desired state attributes.

+ Response 200
  [Instances][]

## Instance [/instances/{name}]

+ Parameters
  + name: `nginx` (string) - The unique name of the instance

+ Model (application/json)

  ```js
  {
    "id": "y7bzwghzP9ouM56g6",
    "name": "nginx",
    "state": {
        "current": "starting",
        "desired": "running"
    },
    "app": {
        "name": "nginx",
        "version": "latest"
    },
    "services": {
        "www": {
            "state": "starting"
        }
    }
  }
  ```

### Retrieve a single instance [GET]
Returns a single instance

+ Response 200

    [Instance][]

+ Response 404

### Create an instance [PUT]
Requests a new instance to be created with a desired state of 'running'.

The `parameters` and `options` properties of the posted document are required
but can be left empty when no parameters are present or when you don't want to
override the default storage bucket. See request example 2.

+ Request (application/json)

  ```js
  {
    "app":"nginx",
    "version":"latest",
    "parameters":{
      "version":"1.11.4"
    },
    "options": {
      "storageBucket": "custom-storage-bucket"
    }
  }
  ```
+ Request (application/json)

  ```js
  {
    "app":"nginx",
    "version":"latest",
    "parameters":{},
    "options": {}
  }
  ```

+ Response 201
    [Instance][]
+ Response 400

### Stop an instance [DELETE]
Requests an instance to be stopped. Returns the instance when successful.

+ Response 200
  [Instance][]
+ Response 404


# Group Storage Buckets

A storage bucket provides a data folder to an instance.

## Storage Buckets [/storageBuckets]

+ Model (application/json)

  ```js
  [
    {
      id: "v6yNgH2MWyogJnSah",
      name: "docker-registry",
      create: "2017-06-15T15:29:21.000Z",
      isLocked: false,
      size: 8192
    },
    {
      id: "5YysCZsuN9WrfCr6Y",
      name: "jenkins",
      create: "2017-06-16T07:45:41.000Z",
      isLocked: false,
      size: 276200826
    }
  ]
  ```

### Retrieve all Storage Buckets [GET]
Returns all storage buckets.

+ Response 200
  [Storage Buckets][]

## Storage Bucket [/storageBuckets/{name}]

+ Parameters
  + name: `nginx` (string) - The unique name of the storage bucket

+ Model (application/json)

  ```js
  {
    id: "5YysCZsuN9WrfCr6Y",
    name: "jenkins",
    create: "2017-06-16T07:45:41.000Z",
    isLocked: false,
    size: 276200826
  }
  ```

### Retrieve a single Storage Bucket [GET]
Returns a single storage bucket

+ Response 200

    [Storage Bucket][]

+ Response 404

### Create a Storage Bucket [PUT]
Requests a new empty storage bucket. Will return 400 if the bucket already exists.

+ Request

+ Response 201
    ```js
    {
      name: name
    }
    ```
+ Response 400

### Stop a storage bucket [DELETE]
Requests a storage bucket to be deleted. WARNING: All data will be lost.

+ Response 200
  [Storage Bucket][]
+ Response 404

## Copy Bucket [/storageBucket/{name}/{source}]

+ Parameters
  + name: `nginx-copy` (string) - The unique name of the new storage bucket
  + source: `nginx` (string) - The unique name of the source (original) storage bucket

### Copy a Storage Bucket [PUT]
Requests a copy of an existing storage bucket. Will return 400 if the bucket already exists, 404 if the source is not found.

+ Request

+ Response 200
    ```js
    {
      name: nginx-copy
    }
    ```
+ Response 400
+ Response 404

# Group Status

## Status [/status]

The status endpoint lists all items that are monitored and reported to BigBoat.
Most statuses have a `details` object containing more detailed information on its state.

+ Model (application/json)

    ```js
    [
      {
        "name": "Available IPs",
        "lastCheck": {
            "time": 1494245442228,
            "ISO": "2017-05-08T12:10:42.228Z"
        },
        "description": "Total number of IPs: 190. IPs in use: 19. <strong>Available IPs: 171</strong>",
        "details": {
            "totalIps": 190,
            "usedIps": 19
        },
        "isOk": true
        },
        {
          "name": "Docker graph: /var/lib/docker",
          "lastCheck": {
              "time": 1494245487722,
              "ISO": "2017-05-08T12:11:27.722Z"
          },
          "description": "Total size: 218.2 GB. <strong>Available: 96.3 GB</strong>",
          "details": {
              "total": 234322399232,
              "used": 130956759040,
              "free": 103365640192
          },
          "isOk": true
        },
        ...
    ]
    ```

### Retrieve all Statuses [GET]
Returns all statuses.

+ Response 200

  [Status][]
